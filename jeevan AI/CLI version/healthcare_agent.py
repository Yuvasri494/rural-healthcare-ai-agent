"""
Rural Healthcare AI Assistant
Multilingual offline CLI tool simulating SMS/USSD/IVR experience
"""

import pandas as pd
import pyttsx3
import speech_recognition as sr
from colorama import Fore, Style, init
import os
import sys
import platform
import subprocess
from fuzzywuzzy import fuzz, process
import time
import random

# Initialize colorama
init(autoreset=True)

# Translation dictionary for UI
TRANSLATIONS = {
    'welcome_title': {
        'english': "ЁЯПе RURAL HEALTHCARE AI ASSISTANT ЁЯПе",
        'hindi': "ЁЯПе рдЧреНрд░рд╛рдореАрдг рд╕реНрд╡рд╛рд╕реНрдереНрдп рдПрдЖрдИ рд╕рд╣рд╛рдпрдХ ЁЯПе",
        'tamil': "ЁЯПе роХро┐ро░ро╛роорокрпНрокрпБро▒ роЪрпБроХро╛родро╛ро░ AI роЙродро╡ро┐ропро╛ро│ро░рпН ЁЯПе"
    },
    'welcome_msg': {
        'english': "Welcome to your offline healthcare companion!",
        'hindi': "рдЖрдкрдХреЗ рдСрдлрд╝рд▓рд╛рдЗрди рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╛рдереА рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ!",
        'tamil': "роЙроЩрпНроХро│рпН роЖроГрокрпНро▓рпИройрпН роЪрпБроХро╛родро╛ро░ роЙродро╡ро┐ропро╛ро│ро░рпБроХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН!"
    },
    'disclaimer': {
        'english': "тЪая╕П DISCLAIMER: Basic guidance only. Consult doctors for serious cases.",
        'hindi': "тЪая╕П рдЕрд╕реНрд╡реАрдХрд░рдг: рдХреЗрд╡рд▓ рдмреБрдирд┐рдпрд╛рджреА рдорд╛рд░реНрдЧрджрд░реНрд╢рдиред рдЧрдВрднреАрд░ рдорд╛рдорд▓реЛрдВ рдореЗрдВ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред",
        'tamil': "тЪая╕П роорпБройрпНройрпЖроЪрпНроЪро░ро┐роХрпНроХрпИ: роЕроЯро┐рокрпНрокроЯрпИ ро╡ро┤ро┐роХро╛роЯрпНроЯрпБродро▓рпН роороЯрпНроЯрпБроорпЗ. роХроЯрпБроорпИропро╛рой роиро┐роХро┤рпНро╡рпБроХро│ро┐ро▓рпН рооро░рпБродрпНродрпБро╡ро░рпИроХрпН роХро▓роирпНродро╛ро▓рпЛроЪро┐роХрпНроХро╡рпБроорпН."
    },
    'main_menu': {
        'english': ["1. ЁЯй║ Symptom Diagnosis", "2. ЁЯМР Change Language", "3. ЁЯУК View All Symptoms", "4. ЁЯЪС Emergency Help", "5. тЭМ Exit"],
        'hindi': ["1. ЁЯй║ рд▓рдХреНрд╖рдг рдирд┐рджрд╛рди", "2. ЁЯМР рднрд╛рд╖рд╛ рдмрджрд▓реЗрдВ", "3. ЁЯУК рд╕рднреА рд▓рдХреНрд╖рдг рджреЗрдЦреЗрдВ", "4. ЁЯЪС рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛", "5. тЭМ рдмрд╛рд╣рд░ рдЬрд╛рдПрдБ"],
        'tamil': ["1. ЁЯй║ роЕро▒ро┐роХрпБро▒ро┐ рокро░ро┐роЪрпЛродройрпИ", "2. ЁЯМР роорпКро┤ро┐ропрпИ рооро╛ро▒рпНро▒ро╡рпБроорпН", "3. ЁЯУК роЕройрпИродрпНродрпБ роЕро▒ро┐роХрпБро▒ро┐роХро│рпИропрпБроорпН роХро╛рогрпНроХ", "4. ЁЯЪС роЕро╡роЪро░ роЙродро╡ро┐", "5. тЭМ ро╡рпЖро│ро┐ропрпЗро▒рпБ"]
    },
    'describe_symptom': {
        'english': "ЁЯй║ Describe your symptom:",
        'hindi': "ЁЯй║ рдЕрдкрдиреЗ рд▓рдХреНрд╖рдг рдХрд╛ рд╡рд░реНрдгрди рдХрд░реЗрдВ:",
        'tamil': "ЁЯй║ роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐ропрпИ ро╡ро┐ро╡ро░ро┐роХрпНроХро╡рпБроорпН:"
    },
    'no_match': {
        'english': "No specific match found for your symptom. Please try a different description or consult a doctor.",
        'hindi': "рдЖрдкрдХреЗ рд▓рдХреНрд╖рдг рдХреЗ рд▓рд┐рдП рдХреЛрдИ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдореЗрд▓ рдирд╣реАрдВ рдорд┐рд▓рд╛ред рдХреГрдкрдпрд╛ рдХреЛрдИ рдЕрдиреНрдп рд╡рд┐рд╡рд░рдг рдЖрдЬрд╝рдорд╛рдПрдВ рдпрд╛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВред",
        'tamil': "роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХрпНроХрпБ роХрпБро▒ро┐рокрпНрокро┐роЯрпНроЯ рокрпКро░рпБродрпНродроорпН роХро┐роЯрпИроХрпНроХро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБ роЪрпЖропрпНродрпБ ро╡рпЗро▒рпБ ро╡ро┐ро│роХрпНроХродрпНродрпИ роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН роЕро▓рпНро▓родрпБ рооро░рпБродрпНродрпБро╡ро░рпИроХрпН роХро▓роирпНродро╛ро▓рпЛроЪро┐роХрпНроХро╡рпБроорпН."
    },
    'general_advice': {
        'english': [
            "ЁЯТб General Advice: Rest well and stay hydrated",
            "ЁЯТб General Advice: Avoid strenuous activities",
            "ЁЯТб General Advice: Apply cold compress if there's swelling",
            "ЁЯТб General Advice: Keep the affected area elevated if possible",
            "ЁЯТб General Advice: Monitor your symptoms and consult a doctor if they persist"
        ],
        'hindi': [
            "ЁЯТб рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣: рдЕрдЪреНрдЫреА рддрд░рд╣ рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рд░рд╣реЗрдВ",
            "ЁЯТб рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣: рдЬрд╝реЛрд░рджрд╛рд░ рдЧрддрд┐рд╡рд┐рдзрд┐рдпреЛрдВ рд╕реЗ рдмрдЪреЗрдВ",
            "ЁЯТб рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣: рд╕реВрдЬрди рд╣реЛрдиреЗ рдкрд░ рдардВрдбреА рд╕рд┐рдХрд╛рдИ рдХрд░реЗрдВ",
            "ЁЯТб рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣: рдпрджрд┐ рд╕рдВрднрд╡ рд╣реЛ рддреЛ рдкреНрд░рднрд╛рд╡рд┐рдд рдХреНрд╖реЗрддреНрд░ рдХреЛ рдКрдВрдЪрд╛ рд░рдЦреЗрдВ",
            "ЁЯТб рд╕рд╛рдорд╛рдиреНрдп рд╕рд▓рд╛рд╣: рдЕрдкрдиреЗ рд▓рдХреНрд╖рдгреЛрдВ рдкрд░ рдирдЬрд╝рд░ рд░рдЦреЗрдВ рдФрд░ рдпрджрд┐ рд╡реЗ рдмрдиреЗ рд░рд╣реЗрдВ рддреЛ рдбреЙрдХреНрдЯрд░ рд╕реЗ рд╕рд▓рд╛рд╣ рд▓реЗрдВ"
        ],
        'tamil': [
            "ЁЯТб рокрпКродрпБ роЕро▒ро┐ро╡рпБро░рпИ: роиройрпНро▒ро╛роХ роУропрпНро╡рпЖроЯрпБродрпНродрпБ роирпАро░рпЗро▒рпНро▒роорпН роЪрпЖропрпНропрпБроЩрпНроХро│рпН",
            "ЁЯТб рокрпКродрпБ роЕро▒ро┐ро╡рпБро░рпИ: роХроЯро┐ройрооро╛рой роЪрпЖропро▓рпНроХро│рпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН",
            "ЁЯТб рокрпКродрпБ роЕро▒ро┐ро╡рпБро░рпИ: ро╡рпАроХрпНроХроорпН роЗро░рпБроирпНродро╛ро▓рпН роХрпБро│ро┐ро░рпН роЕро┤рпБродрпНродроорпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН",
            "ЁЯТб рокрпКродрпБ роЕро▒ро┐ро╡рпБро░рпИ: роорпБроЯро┐роирпНродро╛ро▓рпН рокро╛родро┐роХрпНроХрокрпНрокроЯрпНроЯ рокроХрпБродро┐ропрпИ роЙропро░рпНродрпНродро┐ ро╡рпИроХрпНроХро╡рпБроорпН",
            "ЁЯТб рокрпКродрпБ роЕро▒ро┐ро╡рпБро░рпИ: роЙроЩрпНроХро│рпН роЕро▒ро┐роХрпБро▒ро┐роХро│рпИ роХрогрпНроХро╛рогро┐родрпНродрпБ, роЕро╡рпИ родрпКроЯро░рпНроирпНродро╛ро▓рпН рооро░рпБродрпНродрпБро╡ро░рпИ роЕрогрпБроХро╡рпБроорпН"
        ]
    },
    'thank_you': {
        'english': "тЬЕ Thank you for using Rural Healthcare AI Assistant. Stay healthy!",
        'hindi': "тЬЕ рдЧреНрд░рд╛рдореАрдг рд╕реНрд╡рд╛рд╕реНрдереНрдп рдПрдЖрдИ рд╕рд╣рд╛рдпрдХ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдзрдиреНрдпрд╡рд╛рджред рд╕реНрд╡рд╕реНрде рд░рд╣реЗрдВ!",
        'tamil': "тЬЕ роХро┐ро░ро╛роорокрпНрокрпБро▒ роЪрпБроХро╛родро╛ро░ AI роЙродро╡ро┐ропро╛ро│ро░рпИрокрпН рокропройрпНрокроЯрпБродрпНродро┐ропродро▒рпНроХрпБ роиройрпНро▒ро┐. роЖро░рпЛроХрпНроХро┐ропрооро╛роХ роЗро░рпБроЩрпНроХро│рпН!"
    },
    'voice_fallback': {
        'english': "Voice not recognized. Falling back to text input...",
        'hindi': "рд╡реЙрдЗрд╕ рдирд╣реАрдВ рдкрд╣рдЪрд╛рдирд╛ рдЧрдпрд╛ред рдЯреЗрдХреНрд╕реНрдЯ рдЗрдирдкреБрдЯ рдкрд░ рд╕реНрд╡рд┐рдЪ рдХрд░ рд░рд╣реЗ рд╣реИрдВ...",
        'tamil': "роХрпБро░ро▓рпН роЕро▒ро┐ропрокрпНрокроЯро╡ро┐ро▓рпНро▓рпИ. роЙро░рпИ роЙро│рпНро│рпАроЯрпНроЯрпБроХрпНроХрпБродрпН родро┐ро░рпБроорпНрокрпБроХро┐ро▒родрпБ..."
    },
    'emergency_msg': {
        'english': "ЁЯЪС Emergency help requested! Ambulance is on the way. Please wait and stay calm.",
        'hindi': "ЁЯЪС рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕рд╣рд╛рдпрддрд╛ рдХрд╛ рдЕрдиреБрд░реЛрдз рдХрд┐рдпрд╛ рдЧрдпрд╛! рдПрдореНрдмреБрд▓реЗрдВрд╕ рд░рд╛рд╕реНрддреЗ рдореЗрдВ рд╣реИред рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ рдФрд░ рд╢рд╛рдВрдд рд░рд╣реЗрдВред",
        'tamil': "ЁЯЪС роЕро╡роЪро░ роЙродро╡ро┐ роХрпЛро░рокрпНрокроЯрпНроЯродрпБ! роЖроорпНрокрпБро▓ройрпНро╕рпН ро╡ро┤ро┐ропро┐ро▓рпН роЙро│рпНро│родрпБ. родропро╡рпБ роЪрпЖропрпНродрпБ роХро╛родрпНродро┐ро░рпБроХрпНроХро╡рпБроорпН роЕроорпИродро┐ропро╛роХ роЗро░рпБроЩрпНроХро│рпН."
    },
    'first_aid_emergency': {
        'english': "ЁЯй╣ First Aid: Check responsiveness, call for help, perform CPR if trained, control bleeding if present.",
        'hindi': "ЁЯй╣ рдкреНрд░рд╛рдердорд┐рдХ рдЙрдкрдЪрд╛рд░: рдкреНрд░рддрд┐рдХреНрд░рд┐рдпрд╛ рдЬрд╛рдВрдЪреЗрдВ, рдорджрдж рдХреЗ рд▓рд┐рдП рдмреБрд▓рд╛рдПрдВ, рдпрджрд┐ рдкреНрд░рд╢рд┐рдХреНрд╖рд┐рдд рд╣реИрдВ рддреЛ рд╕реАрдкреАрдЖрд░ рдХрд░реЗрдВ, рд░рдХреНрддрд╕реНрд░рд╛рд╡ рд╣реЛрдиреЗ рдкрд░ рдЙрд╕реЗ рдирд┐рдпрдВрддреНрд░рд┐рдд рдХрд░реЗрдВред",
        'tamil': "ЁЯй╣ роорпБродро▓рпН роЙродро╡ро┐: рокродро┐ро▓ро│ро┐рокрпНрокродрпИ роЪро░ро┐рокро╛ро░рпНроХрпНроХро╡рпБроорпН, роЙродро╡ро┐роХрпНроХрпБ роЕро┤рпИроХрпНроХро╡рпБроорпН, рокропро┐ро▒рпНроЪро┐ рокрпЖро▒рпНро▒ро╡ро░рпНроХро│рпН CPR роЪрпЖропрпНропро╡рпБроорпН, роЗро░родрпНродрокрпНрокрпЛроХрпНроХрпБ роЗро░рпБроирпНродро╛ро▓рпН роЕродрпИроХрпН роХроЯрпНроЯрпБрокрпНрокроЯрпБродрпНродро╡рпБроорпН."
    },
    'input_method_prompt': {
        'english': "Choose input method:",
        'hindi': "рдЗрдирдкреБрдЯ рд╡рд┐рдзрд┐ рдЪреБрдиреЗрдВ:",
        'tamil': "роЙро│рпНро│рпАроЯрпНроЯрпБ роорпБро▒рпИропрпИродрпН родрпЗро░рпНроирпНродрпЖроЯрпБроХрпНроХро╡рпБроорпН:"
    },
    'voice_option': {
        'english': "1. ЁЯОд Voice input (requires internet)",
        'hindi': "1. ЁЯОд рд╡реЙрдЗрд╕ рдЗрдирдкреБрдЯ (рдЗрдВрдЯрд░рдиреЗрдЯ рдЖрд╡рд╢реНрдпрдХ)",
        'tamil': "1. ЁЯОд роХрпБро░ро▓рпН роЙро│рпНро│рпАроЯрпБ (роЗрогрпИропроорпН родрпЗро╡рпИ)"
    },
    'text_option': {
        'english': "2. тМия╕П Text input",
        'hindi': "2. тМия╕П рдЯреЗрдХреНрд╕реНрдЯ рдЗрдирдкреБрдЯ",
        'tamil': "2. тМия╕П роЙро░рпИ роЙро│рпНро│рпАроЯрпБ"
    },
    'ambulance_arrival_time': {
        'english': "тП│ Estimated ambulance arrival time:",
        'hindi': "тП│ рдПрдореНрдмреБрд▓реЗрдВрд╕ рдХреЗ рдЖрдиреЗ рдХрд╛ рдЕрдиреБрдорд╛рдирд┐рдд рд╕рдордп:",
        'tamil': "тП│ роЖроорпНрокрпБро▓ройрпНро╕рпН ро╡ро░рпБроорпН роородро┐рокрпНрокро┐роЯрокрпНрокроЯрпНроЯ роирпЗро░роорпН:"
    },
    'minutes_remaining': {
        'english': "minutes remaining...",
        'hindi': "рдорд┐рдирдЯ рдмрд╛рдХреА...",
        'tamil': "роиро┐рооро┐роЯроЩрпНроХро│рпН роорпАродроорпБро│рпНро│рой..."
    },
    'ambulance_arrived': {
        'english': "ЁЯЪС Ambulance has arrived! Help is here.",
        'hindi': "ЁЯЪС рдПрдореНрдмреБрд▓реЗрдВрд╕ рдЖ рдЧрдИ! рдорджрдж рдпрд╣рд╛рдБ рд╣реИред",
        'tamil': "ЁЯЪС роЖроорпНрокрпБро▓ройрпНро╕рпН ро╡роирпНродрпБро╡ро┐роЯрпНроЯродрпБ! роЙродро╡ро┐ роЗроЩрпНроХрпЗ роЙро│рпНро│родрпБ."
    }
}

LABELS = {
    'english': {
        'symptom': "ЁЯУЛ Symptom",
        'confidence': "ЁЯОп Confidence",
        'severity': "тЪая╕П Severity",
        'advice': "ЁЯТб Advice",
        'first_aid': "ЁЯй╣ First Aid"
    },
    'hindi': {
        'symptom': "ЁЯУЛ рд▓рдХреНрд╖рдг",
        'confidence': "ЁЯОп рднрд░реЛрд╕рд╛",
        'severity': "тЪая╕П рдЧрдВрднреАрд░рддрд╛",
        'advice': "ЁЯТб рд╕рд▓рд╛рд╣",
        'first_aid': "ЁЯй╣ рдкреНрд░рд╛рдердорд┐рдХ рдЙрдкрдЪрд╛рд░"
    },
    'tamil': {
        'symptom': "ЁЯУЛ роЕро▒ро┐роХрпБро▒ро┐",
        'confidence': "ЁЯОп роироорпНрокро┐роХрпНроХрпИ",
        'severity': "тЪая╕П родрпАро╡ро┐ро░роорпН",
        'advice': "ЁЯТб роЕро▒ро┐ро╡рпБро░рпИ",
        'first_aid': "ЁЯй╣ роорпБродро▓рпН роЙродро╡ро┐"
    }
}

class HealthcareAssistant:
    def __init__(self):
        self.df = None
        self.tts_engine = None
        self.recognizer = None
        self.microphone = None
        self.current_language = 'english'
        self.language_codes = {'english': 'en','hindi':'hi','tamil':'ta'}
        self.setup_components()
        self.load_knowledge_base()

    def get_text(self, key):
        return TRANSLATIONS.get(key, {}).get(self.current_language, key)

    def setup_components(self):
        try:
            import pyttsx3
            self.tts_engine = pyttsx3.init()
            voices = self.tts_engine.getProperty('voices')
            if voices:
                # Set first available voice as default
                self.tts_engine.setProperty('voice', voices[0].id)
                # Adjust rate for better clarity
                rate = self.tts_engine.getProperty('rate')
                self.tts_engine.setProperty('rate', max(150, rate - 50))
            print(f"{Fore.GREEN}тЬЕ Offline TTS initialized successfully")
            
            import speech_recognition as sr
            self.recognizer = sr.Recognizer()
            self.microphone = sr.Microphone()
            print(f"{Fore.GREEN}тЬЕ Speech recognition available")
        except Exception as e:
            print(f"{Fore.YELLOW}тЪая╕П TTS setup warning: {e}")
            print(f"{Fore.YELLOW}   Fallback: Text-only mode available")

    def load_knowledge_base(self):
        try:
            if not os.path.exists('healthcare_kb.csv'):
                print(f"{Fore.RED}Error: healthcare_kb.csv not found!")
                # Create a minimal demo knowledge base
                self.create_demo_knowledge_base()
                print(f"{Fore.GREEN}тЬЕ Created demo knowledge base")
            else:
                self.df = pd.read_csv('healthcare_kb.csv')
                print(f"{Fore.GREEN}тЬЕ Knowledge base loaded: {len(self.df)} symptoms available")
        except Exception as e:
            print(f"{Fore.RED}Error loading knowledge base: {e}")
            self.create_demo_knowledge_base()
            print(f"{Fore.GREEN}тЬЕ Created demo knowledge base as fallback")

    def create_demo_knowledge_base(self):
        """Create a simple demo knowledge base if the main one is not available"""
        data = {
            'symptom_english': ['fever', 'headache', 'chest pain', 'stomach ache', 'cough'],
            'symptom_hindi': ['рдмреБрдЦрд╛рд░', 'рд╕рд┐рд░ рджрд░реНрдж', 'рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж', 'рдкреЗрдЯ рджрд░реНрдж', 'рдЦрд╛рдВрд╕реА'],
            'symptom_tamil': ['роХро╛ропрпНроЪрпНроЪро▓рпН', 'родро▓рпИро╡ро▓ро┐', 'роирпЖроЮрпНроЪрпБ ро╡ро▓ро┐', 'ро╡ропро┐ро▒рпБ ро╡ро▓ро┐', 'роЗро░рпБрооро▓рпН'],
            'severity': ['H', 'H', 'E', 'D', 'H'],
            'advice_english': [
                'Rest and drink plenty of fluids',
                'Take rest in a dark room and use cold compress',
                'Seek immediate medical attention',
                'Avoid spicy food and drink plenty of water',
                'Stay hydrated and use honey lemon tea'
            ],
            'advice_hindi': [
                'рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рдЦреВрдм рд╕рд╛рд░реЗ рддрд░рд▓ рдкрджрд╛рд░реНрде рдкрд┐рдПрдВ',
                'рдЕрдВрдзреЗрд░реЗ рдХрдорд░реЗ рдореЗрдВ рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рдардВрдбреА рд╕рд┐рдХрд╛рдИ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ',
                'рддрддреНрдХрд╛рд▓ рдЪрд┐рдХрд┐рддреНрд╕рд╛ рд╕рд╣рд╛рдпрддрд╛ рд▓реЗрдВ',
                'рдорд╕рд╛рд▓реЗрджрд╛рд░ рднреЛрдЬрди рд╕реЗ рдмрдЪреЗрдВ рдФрд░ рдЦреВрдм рдкрд╛рдиреА рдкрд┐рдПрдВ',
                'рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рд░рд╣реЗрдВ рдФрд░ рд╢рд╣рдж рдиреАрдВрдмреВ рдХреА рдЪрд╛рдп рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ'
            ],
            'advice_tamil': [
                'роУропрпНро╡рпЖроЯрпБродрпНродрпБ роиро┐ро▒рпИроп родро┐ро░ро╡роЩрпНроХро│рпИ роХрпБроЯро┐роХрпНроХро╡рпБроорпН',
                'роЗро░рпБрогрпНроЯ роЕро▒рпИропро┐ро▓рпН роУропрпНро╡рпЖроЯрпБродрпНродрпБроХрпН роХрпБро│ро┐ро░рпН роЕро┤рпБродрпНродроорпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН',
                'роЙроЯройроЯро┐ропро╛роХ рооро░рпБродрпНродрпБро╡ роЙродро╡ро┐ рокрпЖро▒ро╡рпБроорпН',
                'роХро╛ро░рооро╛рой роЙрогро╡рпБроХро│рпИ родро╡ро┐ро░рпНродрпНродрпБ роиро┐ро▒рпИроп родрогрпНрогрпАро░рпН роХрпБроЯро┐роХрпНроХро╡рпБроорпН',
                'роирпАро░рпЗро▒рпНро▒роорпН роЪрпЖропрпНродрпБ родрпЗройрпН роОро▓рпБрооро┐роЪрпНроЪрпИ родрпЗроирпАро░рпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН'
            ],
            'first_aid_english': [
                'Take paracetamol and use cold sponge',
                'Apply cold compress to forehead',
                'Call emergency services immediately',
                'Apply heat to abdomen and avoid solid foods',
                'Use cough drops and stay hydrated'
            ],
            'first_aid_hindi': [
                'рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ рд▓реЗрдВ рдФрд░ рдардВрдбреЗ рд╕реНрдкрдВрдЬ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ',
                'рдорд╛рдереЗ рдкрд░ рдардВрдбреА рд╕рд┐рдХрд╛рдИ рд▓рдЧрд╛рдПрдВ',
                'рддреБрд░рдВрдд рдЖрдкрд╛рддрдХрд╛рд▓реАрди рд╕реЗрд╡рд╛рдУрдВ рдХреЛ рдХреЙрд▓ рдХрд░реЗрдВ',
                'рдкреЗрдЯ рдкрд░ рдЧрд░реНрдореА рд▓рдЧрд╛рдПрдВ рдФрд░ рдареЛрд╕ foods рд╕реЗ рдмрдЪреЗрдВ',
                'рдЦрд╛рдВрд╕реА рдХреА рджрд╡рд╛ рдХрд╛ use рдХрд░реЗрдВ рдФрд░ рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рд░рд╣реЗрдВ'
            ],
            'first_aid_tamil': [
                'рокро╛ро░ро╛роЪро┐роЯрпНроЯроорпЛро▓рпН роОроЯрпБродрпНродрпБ роХрпБро│ро┐ро░рпН роЪрпНрокрпЛроЮрпНроЪрпН рокропройрпНрокроЯрпБродрпНродро╡рпБроорпН',
                'роирпЖро▒рпНро▒ро┐ропро┐ро▓рпН роХрпБро│ро┐ро░рпН роЕро┤рпБрддрпНродроорпН apply роЪрпЖропрпНропро╡рпБроорпН',
                'роЙроЯройроЯро┐ропро╛роХ роЕро╡роЪро░ роЪрпЗро╡рпИроХро│рпИ роЕро┤рпИроХрпНроХро╡рпБроорпН',
                'ро╡ропро┐ро▒рпНро▒ро┐ро▓рпН ро╡рпЖрокрпНрокроорпН apply роЪрпЖропрпНродрпБ родро┐роЯ роЙрогро╡рпБроХро│рпИ родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН',
                'роЗро░рпБрооро▓рпН рооро╛родрпНродро┐ро░рпИроХро│рпН рокропройрпНрокроЯрпБродрпНродро┐ роирпАро░рпЗро▒рпНро▒роорпН роЪрпЖропрпНропро╡рпБроорпН'
            ]
        }
        self.df = pd.DataFrame(data)
        self.df.to_csv('healthcare_kb.csv', index=False)

    def speak_text(self, text):
        """
        Enhanced offline text-to-speech with multiple fallback options
        """
        # Remove emojis and special characters for cleaner speech
        clean_text = ''.join(c for c in text if c.isalnum() or c.isspace() or c in '.,!?')
        
        if not clean_text.strip():
            return
            
        # Method 1: Try pyttsx3 (cross-platform offline TTS)
        if self.tts_engine:
            try:
                self.tts_engine.say(clean_text)
                self.tts_engine.runAndWait()
                return
            except Exception as e:
                print(f"{Fore.YELLOW}[TTS Warning]: pyttsx3 failed: {e}")
        
        # Method 2: System-specific TTS fallbacks
        system = platform.system()
        try:
            if system == "Windows":
                # Windows SAPI via PowerShell
                cmd = f'powershell -Command "Add-Type -AssemblyName System.Speech; (New-Object System.Speech.Synthesis.SpeechSynthesizer).Speak(\'{clean_text}\')"'
                subprocess.run(cmd, shell=True, capture_output=True, timeout=10)
                return
                
            elif system == "Darwin":  # macOS
                subprocess.run(['say', clean_text], timeout=10)
                return
                
            elif system == "Linux":
                # Try espeak first, then festival
                try:
                    subprocess.run(['espeak', clean_text], timeout=10, capture_output=True)
                    return
                except FileNotFoundError:
                    subprocess.run(['festival', '--tts'], input=clean_text, text=True, timeout=10)
                    return
                    
        except (subprocess.TimeoutExpired, FileNotFoundError, Exception) as e:
            print(f"{Fore.YELLOW}[TTS Info]: System TTS unavailable: {e}")
        
        # Method 3: Text display fallback (always works)
        print(f"{Fore.CYAN}[AUDIO]: {text}")
    
    def select_language(self):
        prompt = "\nЁЯМР Select language / роорпКро┤ро┐ / рднрд╛рд╖рд╛ [1:English, 2:рд╣рд┐рдВрджреА, 3:родрооро┐ро┤рпН]:"
        print(prompt)
        self.speak_text(prompt)
        while True:
            choice = input("Enter choice (1-3): ").strip()
            if choice=='1': 
                self.current_language='english'
                break
            elif choice=='2': 
                self.current_language='hindi'
                break
            elif choice=='3': 
                self.current_language='tamil'
                break
            else: 
                error_msg = "Invalid. Enter 1-3."
                print(error_msg)
                self.speak_text(error_msg)

    def show_welcome_screen(self):
        print(f"{Fore.GREEN}{Style.BRIGHT}")
        print("="*60)
        title = self.get_text('welcome_title')
        print(title)
        print("="*60)
        welcome = self.get_text('welcome_msg')
        disclaimer = self.get_text('disclaimer')
        print(welcome)
        print(disclaimer)
        print("="*60)
        self.speak_text(title)
        self.speak_text(welcome)
        self.speak_text(disclaimer)
    
    def show_menu(self):
        menu_lines = self.get_text('main_menu')
        for line in menu_lines:
            print(line)
        self.speak_text(" ".join(menu_lines))

    def get_multilingual_input(self, prompt):
        """Get input with choice of voice or text method"""
        print(f"\n{self.get_text('input_method_prompt')}")
        print(self.get_text('voice_option'))
        print(self.get_text('text_option'))
        
        choice = input("Enter choice (1-2): ").strip()
        
        if choice == '1':
            return self.get_voice_input(prompt)
        else:
            return self.get_text_input(prompt)

    def get_voice_input(self, prompt):
        """Get input via voice recognition"""
        try:
            with self.microphone as source:
                self.recognizer.adjust_for_ambient_noise(source, duration=1)
                listen_msg = "ЁЯОд Listening for 10 seconds... speak now"
                print(listen_msg)
                self.speak_text(listen_msg)
                audio = self.recognizer.listen(source, timeout=10, phrase_time_limit=10)
                text = self.recognizer.recognize_google(audio, language=self.language_codes[self.current_language])
                print(f"ЁЯУЭ You said: {text}")
                self.speak_text(f"You said: {text}")
                return text.lower().strip()
        except (sr.UnknownValueError, sr.WaitTimeoutError):
            fallback_msg = self.get_text('voice_fallback')
            print(fallback_msg)
            self.speak_text(fallback_msg)
            return self.get_text_input(prompt)
        except sr.RequestError:
            error_msg = "тЭМ Speech recognition service unavailable. Falling back to text input..."
            print(error_msg)
            self.speak_text(error_msg)
            return self.get_text_input(prompt)
        except Exception as e:
            error_msg = f"тЭМ Error: {e}. Falling back to text input..."
            print(error_msg)
            self.speak_text(error_msg)
            return self.get_text_input(prompt)

    def get_text_input(self, prompt):
        """Get input via text"""
        print(f"\n{prompt}")
        user_input = input("Enter text: ").strip().lower()
        return user_input

    def find_matching_symptom(self, user_input):
        # First check if input is empty or too short
        if not user_input or len(user_input.strip()) < 3:
            return None, 0
            
        col = f"symptom_{self.current_language}"
        if col not in self.df.columns: 
            col = "symptom_english"
            
        symptoms = self.df[col].str.lower().fillna('').tolist()
        
        # Use partial ratio for better matching of partial words
        best_match = process.extractOne(user_input, symptoms, scorer=fuzz.partial_ratio)
        
        if best_match and best_match[1] >= 90:  # Higher threshold for better accuracy
            row = self.df[self.df[col].str.lower().fillna('') == best_match[0]]
            if not row.empty: 
                return row.iloc[0], best_match[1]
                
        return None, 0

    def display_symptom_info(self, row, conf):
        col = f"symptom_{self.current_language}"
        name = row[col] if col in row and not pd.isna(row[col]) else row['symptom_english']

        SEVERITY_TRANSLATIONS = {
            'H': {'english': 'ЁЯПа HOME CARE', 'hindi': 'ЁЯПа рдШрд░реЗрд▓реВ рджреЗрдЦрднрд╛рд▓', 'tamil': 'ЁЯПа ро╡рпАроЯрпНроЯро┐ро▓рпН рокро░ро╛рооро░ро┐рокрпНрокрпБ'},
            'D': {'english': 'ЁЯСитАНтЪХя╕П DOCTOR VISIT', 'hindi': 'ЁЯСитАНтЪХя╕П рдбреЙрдХреНрдЯрд░ рдХреЛ рджрд┐рдЦрд╛рдПрдБ', 'tamil': 'ЁЯСитАНтЪХя╕П рооро░рпБродрпНродрпБро╡ро░рпИ роЕрогрпБроХро╡рпБроорпН'},
            'E': {'english': 'ЁЯЪи EMERGENCY', 'hindi': 'ЁЯЪи рдЖрдкрд╛рддрдХрд╛рд▓', 'tamil': 'ЁЯЪи роЕро╡роЪро░роорпН'}
        }

        color_map = {'H': Fore.GREEN, 'D': Fore.YELLOW, 'E': Fore.RED}
        color = color_map.get(row['severity'], Fore.WHITE)
        severity_text = SEVERITY_TRANSLATIONS.get(row['severity'], {}).get(self.current_language, 'UNKNOWN')

        advice_col = f"advice_{self.current_language}"
        advice = row[advice_col] if advice_col in row and not pd.isna(row[advice_col]) else row['advice_english']
        
        first_aid_col = f"first_aid_{self.current_language}"
        first_aid = row[first_aid_col] if first_aid_col in row and not pd.isna(row[first_aid_col]) else row['first_aid_english']

        print(f"\n{Fore.CYAN}{'='*50}")
        labels = LABELS[self.current_language]

        print(f"{labels['symptom']}: {name}")
        self.speak_text(f"{labels['symptom']}: {name}")

        print(f"{labels['confidence']}: {conf}%")
        self.speak_text(f"{labels['confidence']}: {conf} percent")

        print(f"{labels['severity']}: {color}{severity_text}")
        self.speak_text(f"{labels['severity']}: {severity_text}")

        print(f"{labels['advice']}: {advice}")
        self.speak_text(f"{labels['advice']}: {advice}")

        print(f"{labels['first_aid']}: {first_aid}")
        self.speak_text(f"{labels['first_aid']}: {first_aid}")

        print(f"{Fore.CYAN}{'='*50}")

    def display_general_advice(self):
        """Display general health advice when no specific symptom is matched"""
        print(f"\n{Fore.YELLOW}{'='*50}")
        print(f"ЁЯТб {self.get_text('no_match')}")
        self.speak_text(self.get_text('no_match'))
        
        # Show 2-3 random general advice items
        general_advice = self.get_text('general_advice')
        selected_advice = random.sample(general_advice, min(3, len(general_advice)))
        
        for advice in selected_advice:
            print(f"{Fore.YELLOW}{advice}")
            self.speak_text(advice)
            
        print(f"{Fore.YELLOW}{'='*50}")

    def view_all_symptoms(self):
        print(f"\nЁЯУК Symptoms in DB:")
        self.speak_text("Symptoms in database")
        col = f"symptom_{self.current_language}"
        if col not in self.df.columns: 
            col = "symptom_english"
            
        for _, r in self.df.iterrows():
            sev = r['severity']
            color = {'H': Fore.GREEN, 'D': Fore.YELLOW, 'E': Fore.RED}.get(sev, Fore.WHITE)
            name = r[col] if not pd.isna(r[col]) else r['symptom_english']
            print(f"{color}тАв {name} ({sev})")
        self.speak_text("Displayed all symptoms")

    def handle_emergency(self):
        """Handle emergency request with ambulance alert and first aid instructions"""
        emergency_msg = self.get_text('emergency_msg')
        first_aid_msg = self.get_text('first_aid_emergency')
        
        # Display emergency message with red background for attention
        print(f"{Fore.RED}{Style.BRIGHT}")
        print("!" * 60)
        print(emergency_msg)
        print("!" * 60)
        print(f"{Fore.YELLOW}{first_aid_msg}")
        print(f"{Fore.RED}{Style.BRIGHT}" + "!" * 60)
        
        # Speak the emergency messages
        self.speak_text(emergency_msg)
        time.sleep(2)
        self.speak_text(first_aid_msg)
        
        # Countdown to simulate waiting for ambulance
        arrival_time_msg = self.get_text('ambulance_arrival_time')
        print(f"\n{Fore.CYAN}{arrival_time_msg}")
        self.speak_text(arrival_time_msg)
        
        minutes_remaining_text = self.get_text('minutes_remaining')
        for i in range(5, 0, -1):
            countdown_msg = f"{i} {minutes_remaining_text}"
            print(f"{Fore.CYAN}{countdown_msg}")
            self.speak_text(countdown_msg)
            time.sleep(1)
            
        ambulance_arrived_msg = self.get_text('ambulance_arrived')
        print(f"{Fore.GREEN}{ambulance_arrived_msg}")
        self.speak_text(ambulance_arrived_msg)

    def run(self):
        self.select_language()
        self.show_welcome_screen()
        
        while True:
            self.show_menu()
            choice = input("Enter choice (1-5): ").strip()
            
            if choice == '1':
                user_input = self.get_multilingual_input(self.get_text('describe_symptom'))
                if not user_input or len(user_input.strip()) < 3:
                    print("Please provide a more detailed description of your symptom.")
                    self.speak_text("Please provide a more detailed description of your symptom.")
                    continue
                    
                row, conf = self.find_matching_symptom(user_input)
                if row is not None: 
                    self.display_symptom_info(row, conf)
                else: 
                    self.display_general_advice()
                    
            elif choice == '2':
                self.select_language()
                
            elif choice == '3':
                self.view_all_symptoms()
                
            elif choice == '4':
                self.handle_emergency()
                
            elif choice == '5':
                msg = self.get_text('thank_you')
                print(msg)
                self.speak_text(msg)
                break
                
            else: 
                print("Invalid. Enter 1-5.")
                self.speak_text("Invalid. Enter 1 to 5.")

def main():
    try:
        assistant = HealthcareAssistant()
        assistant.run()
    except KeyboardInterrupt:
        print("\nЁЯСЛ Exiting... Stay safe!")
    except Exception as e:
        print(f"\nтЭМ Error: {e}")

if __name__ == "__main__":
    main()
